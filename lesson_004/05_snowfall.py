# -*- coding: utf-8 -*-

import simple_draw as sd

sd.resolution = (1200, 900)
# На основе кода из практической части реализовать снегопад:
# - создать списки данных для отрисовки N снежинок
# - нарисовать падение этих N снежинок
# - создать список рандомных длин лучей снежинок (от 10 до 100) и пусть все снежинки будут разные

N = 20

# Пригодятся функции
# sd.get_point()
# sd.snowflake()
# sd.sleep()
# sd.random_number()
# sd.user_want_exit()

_coordinates = []
for _ in range(N):
    _coordinates.append([sd.random_number(200, 900), sd.random_number(800, 900), sd.random_number(10, 50)])

#  Часть 1!
# while True:
#     sd.clear_screen()
#     for item in coordinates:
#         point = sd.get_point(item[0], item[1])
#         sd.snowflake(center=point, length=item[2])
#         item[1] -= 10
#         if item[1] < 50:
#             break
#         item[0] += 2
#     sd.sleep(0.1)
#     if sd.user_want_exit():
#         break

# Примерный алгоритм отрисовки снежинок
#   навсегда
#     очистка экрана
#     для индекс, координата_х из списка координат снежинок
#       получить координата_у по индексу
#       изменить координата_у и запомнить её в списке по индексу
#       создать точку отрисовки снежинки по координатам
#       нарисовать снежинку белым цветом в этой точке
#     немного поспать
#     если пользователь хочет выйти
#       прервать цикл


# Часть 2 (делается после зачета первой части)
#
# Ускорить отрисовку снегопада
# - убрать clear_screen() из цикла: полная очистка всего экрана - долгая операция.
# - использовать хак для стирания старого положения снежинки:
#       отрисуем её заново на старом месте, но цветом фона (sd.background_color) и она исчезнет!
# - использовать функции sd.start_drawing() и sd.finish_drawing()
#       для начала/окончания отрисовки кадра анимации
# - между start_drawing и finish_drawing библиотека sd ничего не выводит на экран,
#       а сохраняет нарисованное в промежуточном буфере, за счет чего достигается ускорение анимации
# - в момент вызова finish_drawing все нарисованное в буфере разом покажется на экране
#
# Примерный алгоритм ускоренной отрисовки снежинок
#   навсегда
#     начать рисование кадра
#     для индекс, координата_х из списка координат снежинок
#       получить координата_у по индексу
#       создать точку отрисовки снежинки
#       нарисовать снежинку цветом фона
#       изменить координата_у и запомнить её в списке по индексу
#       создать новую точку отрисовки снежинки
#       нарисовать снежинку на новом месте белым цветом
#     закончить рисование кадра
#     немного поспать
#     если пользователь хочет выйти
#       прервать цикл
#
#  Третья часть получилась - Почему? здесь только ускоренная отрисовка! Принципиально ли создавать раздельные
#  списки для входных данных или можно было сделать список списков?
#  часть 2!
#  Обычно удобнее работать с вложенными списками.
# while True:
#     sd.start_drawing()
#     for item in coordinates:
#         point = sd.get_point(item[0], item[1])
#         sd.snowflake(center=point, length=item[2], color=sd.background_color)
#         item[1] -= 10
#         if item[1] < 5:
#             break
#         item[0] += 2
#         point = sd.get_point(item[0], item[1])
#         sd.snowflake(center=point, length=item[2])
#     sd.finish_drawing()
#     sd.sleep(0.1)
#     if sd.user_want_exit():
#         break

# Усложненное задание (делать по желанию)
# - сделать рандомные отклонения вправо/влево при каждом шаге
# - сделать сугоб внизу экрана - если снежинка долетает до низа, оставлять её там,
#   и добавлять новую снежинку
# Результат решения см https://youtu.be/XBx0JtxHiLg

#  часть 3! Тут добавлены отклонения по оси Х и растущий сугроб!
#  переменная i считает упавшие снежинки; досчитав до snow, программа дает возможность упасть
#  всем снежинкам на экране; одновременно падает N снежинок.

i = 0
snow = 100
while True:
    y = 0
    while y < len(_coordinates):
        item = _coordinates[y]
        sd.start_drawing()
        point = sd.get_point(item[0], item[1])
        sd.snowflake(center=point, length=item[2], color=sd.background_color)
        item[1] -= sd.random_number(10, 20)
        item[0] += sd.random_number(-5, 5)
        point = sd.get_point(item[0], item[1])
        sd.snowflake(center=point, length=item[2])
        if item[1] < 10 + i:
            del _coordinates[y]
            if y != 0:
                y -= 1
            _coordinates.append([sd.random_number(200, 900), sd.random_number(800, 900),
                                 sd.random_number(10, 50)])
            if i < 150:
                i += 1
            continue
        sd.finish_drawing()
        y += 1
    sd.sleep(0.1)
    if sd.user_want_exit():
        break

sd.pause()

# Зачёт!
